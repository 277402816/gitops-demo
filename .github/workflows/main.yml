name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  # terraform:
  #   name: 'Terraform Apply'
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: 'Checkout GitHub Actions'
  #       uses: actions/checkout@v3

  #     - name: 'Set up Terraform'
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: 1.9.1
  #     - name: 'Azure Login'
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}
  #     - name: 'Terraform Init'
  #       run: terraform init
  #       working-directory: ./infrastructure/terraform

  #     - name: 'Terraform Plan'
  #       run: terraform plan
  #       working-directory: ./infrastructure/terraform

  #     - name: 'Terraform Apply'
  #       run: terraform apply -auto-approve
  #       working-directory: ./infrastructure/terraform


  # install_argo_cd:
  #   name: 'Install Argo CD'
  #   needs: terraform
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: 'Checkout code'
  #       uses: actions/checkout@v3

  #     - name: 'Azure Login'
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: 'Configure kubectl'
  #       run: |
  #         az aks get-credentials --resource-group ${{ secrets.RESOURCE_GROUP }} --name myAKSCluster

  #     - name: 'Install Argo CD'
  #       run: |
  #         kubectl create namespace argocd
  #         kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
  #         kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd

  #     - name: 'Deploy Argo CD App Configuration'
  #       run: |
  #         kubectl apply -f ./deploy/argocd-app.yaml
  
  assign_acrpull_role:
    name: 'Assign acrpull Role to AKS'
    runs-on: ubuntu-latest
    # needs: install_argo_cd

    steps:
      - name: 'Azure Login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Get Subscription ID'
        id: get_subscription_id
        run: |
          SUBSCRIPTION_ID=$(az account show --query id --output tsv)
          echo "::set-output name=SUBSCRIPTION_ID::$SUBSCRIPTION_ID"

      - name: 'Get AKS SP Client ID and Object ID'
        id: get_sp_info
        run: |
          SP_INFO=$(az aks show --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }} --query '{clientId:identityProfile.kubeletidentity.clientId,objectId:identityProfile.kubeletidentity.objectId}' --output tsv)
          SP_CLIENT_ID=$(echo $SP_INFO | cut -f1)
          SP_OBJECT_ID=$(echo $SP_INFO | cut -f2)
          echo "::set-output name=SP_CLIENT_ID::$SP_CLIENT_ID"
          echo "::set-output name=SP_OBJECT_ID::$SP_OBJECT_ID"

      - name: 'Get ACR Name'
        id: get_acr_name
        run: |
          ACR_NAME=$(az acr list --resource-group ${{ secrets.RESOURCE_GROUP }} --query '[0].name' --output tsv)
          echo "::set-output name=ACR_NAME::$ACR_NAME"

      - name: 'Assign acrpull Role'
        run: |
          az role assignment create --assignee-object-id ${{ steps.get_sp_info.outputs.SP_OBJECT_ID }} --assignee-principal-type ServicePrincipal --role acrpull --scope /subscriptions/${{ steps.get_subscription_id.outputs.SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.RESOURCE_GROUP }}/providers/Microsoft.ContainerRegistry/registries/${{ steps.get_acr_name.outputs.ACR_NAME }}

          
  build-and-push:
    runs-on: ubuntu-latest
    needs: assign_acrpull_role
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Azure Container Registry
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Build and push Docker image
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    - run: |
        docker build -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/gitops-demo1:${{ github.sha }} ./app1
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/gitops-demo1:${{ github.sha }}
        docker build -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/gitops-demo2:${{ github.sha }} ./app2
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/gitops-demo2:${{ github.sha }}

  update-k8s-manifest:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Update Kubernetes manifest for gitops-demo1
        run: |
          sed -i "s|image: acr4d19045dcc6d1cc2.azurecr.io/gitops-demo1:.*|image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/gitops-demo1:${{ github.sha }}|" deploy/k8s-manifest.yaml
  
      - name: Update Kubernetes manifest for gitops-demo2
        run: |
          sed -i "s|image: acr4d19045dcc6d1cc2.azurecr.io/gitops-demo2:.*|image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/gitops-demo2:${{ github.sha }}|" deploy/k8s-manifest.yaml
      - name: Commit and push changes
        run: |
          git config --global user.name "277402816"
          git config --global user.email "277402816@qq.com"
          git add deploy/k8s-manifest.yaml
          git commit -m "Update Kubernetes manifest with new image tag"
          git push
